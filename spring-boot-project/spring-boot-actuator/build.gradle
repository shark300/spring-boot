plugins {
	id 'java-library'
	id 'org.springframework.boot.conventions'
	id 'org.springframework.boot.configuration-properties'
	id 'org.springframework.boot.optional-dependencies'
	id 'org.springframework.boot.deployed'
	id "org.openrepose.gradle.plugins.jaxb" version "2.5.0"
}

description = 'Spring Boot Actuator'

dependencies {
	api platform(project(':spring-boot-project:spring-boot-dependencies'))

	implementation project(':spring-boot-project:spring-boot')

	optional platform(project(':spring-boot-project:spring-boot-dependencies'))
	optional 'com.fasterxml.jackson.core:jackson-databind'
	optional 'com.hazelcast:hazelcast'
	optional 'com.hazelcast:hazelcast-spring'
	optional 'com.sun.mail:jakarta.mail'
	optional 'com.zaxxer:HikariCP'
	optional 'io.lettuce:lettuce-core'
	optional 'io.micrometer:micrometer-core'
	optional 'io.micrometer:micrometer-registry-prometheus'
	optional 'io.prometheus:simpleclient_pushgateway'
	optional 'io.reactivex:rxjava-reactive-streams'
	optional 'org.elasticsearch.client:elasticsearch-rest-client'
	optional('io.undertow:undertow-servlet') {
		exclude group: 'org.jboss.spec.javax.annotation', module: 'jboss-annotations-api_1.2_spec'
		exclude group: 'org.jboss.spec.javax.servlet', module: 'jboss-servlet-api_4.0_spec'
	}
	optional 'javax.cache:cache-api'
	optional 'javax.jms:javax.jms-api'
	optional 'net.sf.ehcache:ehcache'
	optional 'org.apache.tomcat.embed:tomcat-embed-core'
	optional 'org.aspectj:aspectjweaver'
	optional 'org.eclipse.jetty:jetty-server'
	optional 'org.elasticsearch:elasticsearch'
	optional 'org.flywaydb:flyway-core'
	optional 'org.glassfish.jersey.core:jersey-server'
	optional 'org.glassfish.jersey.containers:jersey-container-servlet-core'
	optional 'org.hibernate.validator:hibernate-validator'
	optional 'org.infinispan:infinispan-spring4-embedded'
	optional 'org.influxdb:influxdb-java'
	optional 'org.liquibase:liquibase-core'
	optional 'org.mongodb:mongodb-driver-async'
	optional 'org.mongodb:mongodb-driver-reactivestreams'
	optional 'org.springframework:spring-jdbc'
	optional 'org.springframework:spring-messaging'
	optional 'org.springframework:spring-webflux'
	optional 'org.springframework:spring-web'
	optional 'org.springframework:spring-webmvc'
	optional 'org.springframework.amqp:spring-rabbit'
	optional 'org.springframework.data:spring-data-cassandra'
	optional 'org.springframework.data:spring-data-couchbase'
	optional 'org.springframework.data:spring-data-ldap'
	optional 'org.springframework.data:spring-data-mongodb'
	optional 'org.springframework.data:spring-data-neo4j'
	optional 'org.springframework.data:spring-data-redis'
	optional 'org.springframework.data:spring-data-rest-webmvc'
	optional 'org.springframework.data:spring-data-solr'
	optional 'org.springframework.integration:spring-integration-core'
	optional 'org.springframework.security:spring-security-core'
	optional 'org.springframework.security:spring-security-web'
	optional 'org.springframework.session:spring-session-core'
	optional 'org.springframework.ws:spring-ws-core'

	testImplementation project(':spring-boot-project:spring-boot-test')
	testImplementation project(':spring-boot-project:spring-boot-tools:spring-boot-test-support')
	testImplementation project(':spring-boot-project:spring-boot-autoconfigure')
	testImplementation 'org.assertj:assertj-core'
	testImplementation 'com.jayway.jsonpath:json-path'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.apache.logging.log4j:log4j-to-slf4j'
	testImplementation 'org.awaitility:awaitility'
	testImplementation 'org.glassfish.jersey.media:jersey-media-json-jackson'
	testImplementation 'org.hamcrest:hamcrest'
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.mockito:mockito-junit-jupiter'
	testImplementation 'org.skyscreamer:jsonassert'
	testImplementation 'org.springframework:spring-test'
	testImplementation 'org.jvnet.jaxb2_commons:jaxb2-basics:1.11.1'
	testImplementation 'org.jvnet.jaxb2_commons:jaxb2-basics-runtime:1.11.1'
	testImplementation 'wsdl4j:wsdl4j:1.6.3'

	testRuntimeOnly 'io.projectreactor.netty:reactor-netty'
	testRuntimeOnly 'javax.xml.bind:jaxb-api'
	testRuntimeOnly 'org.apache.tomcat.embed:tomcat-embed-el'
	testRuntimeOnly 'org.glassfish.jersey.ext:jersey-spring4'
	testRuntimeOnly 'org.hsqldb:hsqldb'

	jaxb "org.jvnet.jaxb2_commons:jaxb2-basics:1.11.1"
	jaxb 'org.jvnet.jaxb2_commons:jaxb2-basics-ant:1.11.1'
	jaxb 'org.jvnet.jaxb2_commons:jaxb2-basics-annotate:1.1.0'
	jaxb 'net.codesup.util:jaxb2-rich-contract-plugin:1.18.0'
	jaxb 'org.slf4j:slf4j-log4j12:1.7.25'
	jaxb 'com.sun.xml.bind:jaxb-xjc:2.2.11'
	jaxb 'com.sun.xml.bind:jaxb-impl:2.2.11'
	jaxb 'com.sun.xml.bind:jaxb-core:2.2.11'
	jaxb 'javax.xml.bind:jaxb-api:2.2.11'
}

compileJava {
	options.compilerArgs << '-parameters'
}

compileTestJava {
	options.compilerArgs << '-parameters'
}

def xjcDestinationDir = "${buildDir}/generated/sources/xjc/java/test"

sourceSets {
	test {
		java {
			srcDirs += xjcDestinationDir
		}
	}
}

jaxb {
	xsdDir = "${project.projectDir}/src/test/resources/ws"
	bindingsDir = "${project.projectDir}/src/test/resources/ws"
	xjc {
		generateEpisodeFiles = false
		generatePackage = "com.example"
		destinationDir = xjcDestinationDir
		args = [
				"-Xequals", "-XhashCode",
				"-XtoString",
				"-Xfluent-builder"
		]
	}
}

tasks.named("xsd-dependency-tree").configure {
	outputs.upToDateWhen { false }
}

compileTestJava.dependsOn xjc